package vn.kltn.service.impl;

import com.azure.storage.blob.BlobClient;
import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobServiceClient;
import com.azure.storage.blob.models.BlobStorageException;
import com.azure.storage.blob.sas.BlobSasPermission;
import com.azure.storage.blob.sas.BlobServiceSasSignatureValues;
import com.azure.storage.blob.specialized.BlockBlobClient;
import com.azure.storage.common.sas.SasProtocol;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import vn.kltn.exception.CustomBlobStorageException;
import vn.kltn.exception.ResourceNotFoundException;
import vn.kltn.service.IAzureStorageService;
import vn.kltn.util.TextUtils;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

@Service
@RequiredArgsConstructor
@Slf4j
public class AzureStorageServiceImpl implements IAzureStorageService {
    private final BlobServiceClient blobServiceClient;
    @Value("${spring.cloud.azure.storage.blob.container-name}")
    private String containerNameDefault;
    private static final int MAX_RETRIES = 3;
    private static final int THREAD_COUNT = 5;

    @Override
    public String uploadChunkedWithContainerDefault(InputStream data, String originalFileName, long length, int chunkSize) {
        try {
            BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerNameDefault);
            String newFileName = UUID.randomUUID() + "_" + TextUtils.normalizeFileName(originalFileName);
            BlockBlobClient blockBlobClient = blobContainerClient.getBlobClient(newFileName).getBlockBlobClient();
            List<String> blockIds = new ArrayList<>();
            byte[] buffer = new byte[chunkSize];
            int bytesRead;
            int blockNumber = 0;

            while ((bytesRead = data.read(buffer)) != -1) {
                String blockId = Base64.getEncoder().encodeToString(String.format("%06d", blockNumber).getBytes()); // T·∫°o Block ID
                blockBlobClient.stageBlock(blockId, new ByteArrayInputStream(buffer, 0, bytesRead), bytesRead);  // Upload t·ª´ng ph·∫ßn
                blockIds.add(blockId);
                // üìå In log ƒë·ªÉ bi·∫øt ph·∫ßn n√†o ƒë√£ upload xong
                // üìå In log v·ªõi s·ªë ph·∫ßn upload th√†nh c√¥ng
                System.out.println("‚úÖ ƒê√£ upload th√†nh c√¥ng ph·∫ßn " + (blockNumber + 1) + " tr√™n t·ªïng s·ªë " + ((length + chunkSize - 1) / chunkSize) + " ph·∫ßn");
                blockNumber++;
            }

            // Gh√©p c√°c ph·∫ßn l·∫°i
            blockBlobClient.commitBlockList(blockIds);

            return blockBlobClient.getBlobName();
        } catch (IOException | BlobStorageException e) {
            log.error("Error uploading file from InputStream: {}", e.getMessage());
            throw new CustomBlobStorageException("L·ªói upload file ");
        }
    }

    @Override
    public CompletableFuture<String> uploadChunk(InputStream data, String originalFileName, long length, int chunkSize) {
        try {
            BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerNameDefault);
            String newFileName = UUID.randomUUID() + "_" + TextUtils.normalizeFileName(originalFileName);
            BlockBlobClient blockBlobClient = blobContainerClient.getBlobClient(newFileName).getBlockBlobClient();
            List<String> blockIds = new ArrayList<>();
            byte[] buffer = new byte[chunkSize];
            int bytesRead;
            int blockNumber = 0;
            while ((bytesRead = data.read(buffer)) != -1) {
                String blockId = Base64.getEncoder().encodeToString(String.format("%06d", blockNumber).getBytes()); // T·∫°o Block ID
                blockBlobClient.stageBlock(blockId, new ByteArrayInputStream(buffer, 0, bytesRead), bytesRead);  // Upload t·ª´ng ph·∫ßn
                blockIds.add(blockId);
                //  In log ƒë·ªÉ bi·∫øt ph·∫ßn n√†o ƒë√£ upload xong
                //  In log v·ªõi s·ªë ph·∫ßn upload th√†nh c√¥ng
                System.out.println("‚úÖ ƒê√£ upload th√†nh c√¥ng ph·∫ßn " + (blockNumber + 1) + " tr√™n t·ªïng s·ªë " + ((length + chunkSize - 1) / chunkSize) + " ph·∫ßn");
                blockNumber++;
            }
            // Gh√©p c√°c ph·∫ßn l·∫°i
            blockBlobClient.commitBlockList(blockIds);

            return CompletableFuture.completedFuture(blockBlobClient.getBlobName());
        } catch (IOException | BlobStorageException e) {
            log.error("Error uploading file from InputStream: {}", e.getMessage());
            throw new CustomBlobStorageException("L·ªói upload file ");
        }
    }


    @Override
    public String copyBlob(String sourceBlobName) {
        try {
            // L·∫•y client c·ªßa container
            BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerNameDefault);

            // T·∫°o client cho blob ngu·ªìn v√† blob ƒë√≠ch
            BlobClient sourceBlobClient = blobContainerClient.getBlobClient(sourceBlobName);
            String destinationBlobName = UUID.randomUUID() + "_" + sourceBlobName.substring(sourceBlobName.indexOf("_") + 1, sourceBlobName.lastIndexOf(".") - 1) + "_copy" + sourceBlobName.substring(sourceBlobName.lastIndexOf("."));
            BlobClient destinationBlobClient = blobContainerClient.getBlobClient(destinationBlobName);

            // Ki·ªÉm tra xem file ngu·ªìn c√≥ t·ªìn t·∫°i kh√¥ng
            if (!sourceBlobClient.exists()) {
                throw new CustomBlobStorageException("File ngu·ªìn kh√¥ng t·ªìn t·∫°i: " + sourceBlobName);
            }

            // L·∫•y URL c·ªßa file ngu·ªìn
            String sourceUrl = sourceBlobClient.getBlobUrl();

            // Sao ch√©p file
            destinationBlobClient.beginCopy(sourceUrl, null);

            return destinationBlobClient.getBlobName();
        } catch (BlobStorageException e) {
            log.error("L·ªói khi sao ch√©p file: {}", e.getMessage());
            throw new CustomBlobStorageException("L·ªói khi sao ch√©p file: " + e.getMessage());
        }
    }


    @Override
    public void deleteBlob(String blobName) {
        deleteBlobByContainerAndBlob(containerNameDefault, blobName);
    }

    private void deleteBlobByContainerAndBlob(String containerName, String blobName) {
        log.info("Deleting blob '{}' in container '{}'", blobName, containerName);
        try {
            BlockBlobClient blobClient = getBlockBlobClient(containerName, blobName);

            if (!blobClient.exists()) {
                log.warn("Blob '{}' does not exist in container '{}'", blobName, containerName);
                return;
            }
            blobClient.delete();
            log.info("Deleted blob '{}' successfully", blobName);

        } catch (Exception e) {
            log.error("Failed to delete blob '{}' in container '{}': {}", blobName, containerName, e.getMessage(), e);
        }
    }

    @Override
    public void deleteBLobs(List<String> blobNames) {
        if (blobNames == null || blobNames.isEmpty()) {
            log.warn("No blobs to delete");
            return;
        }

        log.info("Deleting {} blobs (parallel)...", blobNames.size());

        ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);
        List<Future<?>> futures = new ArrayList<>();

        for (String blobName : blobNames) {
            futures.add(executor.submit(() -> deleteWithRetry(blobName)));
        }

        // Ch·ªù t·∫•t c·∫£ task ho√†n t·∫•t
        for (Future<?> future : futures) {
            try {
                future.get(); // block v√† b·∫Øt l·ªói n·∫øu c√≥
            } catch (Exception e) {
                log.error("Error while deleting blob in parallel task", e);
            }
        }

        executor.shutdown();
        log.info("Blob deletion completed.");
    }

    private void deleteWithRetry(String blobName) {
        for (int attempt = 1; attempt <= MAX_RETRIES; attempt++) {
            try {
                deleteBlobByContainerAndBlob(containerNameDefault, blobName);
                log.debug("Deleted blob: {}", blobName);
                return;
            } catch (Exception e) {
                log.warn("Failed to delete blob '{}', attempt {}/{}", blobName, attempt, MAX_RETRIES, e);
                if (attempt == MAX_RETRIES) {
                    log.error("Giving up on deleting blob: {}", blobName);
                } else {
                    try {
                        Thread.sleep(500L * attempt); // delay tƒÉng d·∫ßn
                    } catch (InterruptedException ignored) {
                    }
                }
            }
        }
    }


    @Override
    public InputStream downloadBlobInputStream(String blobName) {
        return getInputStreamBlob(containerNameDefault, blobName);
    }

    @Override
    public File downloadToFile(String blobName, String tempDirPath) {
        try {
            BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerNameDefault);
            BlockBlobClient blockBlobClient = blobContainerClient.getBlobClient(blobName).getBlockBlobClient();

            // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a t·ªìn t·∫°i
            File tempDir = new File(tempDirPath);
            if (!tempDir.exists()) {
                tempDir.mkdirs();
            }

            // T·∫°o file t·∫°m ƒë·ªÉ l∆∞u
            File downloadedFile = new File(tempDirPath + File.separator + blobName);
            blockBlobClient.downloadToFile(downloadedFile.getAbsolutePath(), true); // true = overwrite if exists

            return downloadedFile;
        } catch (Exception e) {
            log.error("L·ªói khi t·∫£i file t·ª´ Azure Blob: {}", e.getMessage());
            throw new CustomBlobStorageException("Kh√¥ng th·ªÉ t·∫£i file t·ª´ Azure Blob: " + e.getMessage());
        }
    }

    @Override
    public String getBlobUrl(String blobName) {
        try {
            // K·∫øt n·ªëi t·ªõi blob container
            BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerNameDefault);
            BlobClient blobClient = blobContainerClient.getBlobClient(blobName);

            // X√°c ƒë·ªãnh th·ªùi gian h·∫øt h·∫°n cho SAS token (v√≠ d·ª• 1 gi·ªù)
            OffsetDateTime expiryTime = OffsetDateTime.now().plusHours(1);

            // T·∫°o quy·ªÅn truy c·∫≠p SAS cho blob (ch·ªâ ph√©p ƒë·ªçc)
            BlobSasPermission permission = new BlobSasPermission()
                    .setReadPermission(true);

            // T·∫°o SAS token cho blob

            BlobServiceSasSignatureValues sasSignatureValues = new BlobServiceSasSignatureValues(expiryTime, permission)
                    .setStartTime(OffsetDateTime.now().minusMinutes(5)) // ƒê·∫∑t th·ªùi gian b·∫Øt ƒë·∫ßu s·ªõm h∆°n hi·ªán t·∫°i
                    .setProtocol(SasProtocol.HTTPS_HTTP);
            String sasToken = blobClient.generateSas(sasSignatureValues);

            // T·∫°o v√† tr·∫£ v·ªÅ URL v·ªõi SAS token
            String blobUrlWithSas = blobClient.getBlobUrl() + "?" + sasToken;
            return blobUrlWithSas;
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y URL c·ªßa blob: {}", e.getMessage());
            throw new CustomBlobStorageException("Kh√¥ng th·ªÉ l·∫•y URL c·ªßa blob: " + e.getMessage());
        }
    }


    private InputStream getInputStreamBlob(String containerName, String blobName) {
        try {
            BlockBlobClient blobClient = getBlockBlobClient(containerName, blobName);
            if (!blobClient.exists()) {
                log.error("Blob not found: {}", blobName);
                throw new ResourceNotFoundException("File kh√¥ng t·ªìn t·∫°i: " + blobName);
            }
            // ƒê·ªçc file t·ª´ Azure Blob Storage
            return blobClient.openInputStream();
        } catch (Exception e) {
            log.error("Error downloading blob: {}", e.getMessage());
            throw new ResourceNotFoundException("L·ªói khi t·∫£i blob: " + blobName);
        }
    }

    /**
     * Helper method to get BlockBlobClient
     */
    private BlockBlobClient getBlockBlobClient(String containerName, String blobName) {
        return blobServiceClient.getBlobContainerClient(containerName).getBlobClient(blobName).getBlockBlobClient();
    }


}
